// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: security.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createAllocation = `-- name: CreateAllocation :execresult
INSERT INTO allocation(team_member_id, parking_id, service_id, created_at, updated_at)
VALUES($1, $2, $3, $4, $5)
`

type CreateAllocationParams struct {
	TeamMemberID int32
	ParkingID    int32
	ServiceID    int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateAllocation(ctx context.Context, arg CreateAllocationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAllocation,
		arg.TeamMemberID,
		arg.ParkingID,
		arg.ServiceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createDepartment = `-- name: CreateDepartment :execresult
INSERT INTO department(name, codename, accessCode, created_at, updated_at)
VALUES($1, $2, $3, $4, $5)
`

type CreateDepartmentParams struct {
	Name       string
	Codename   string
	Accesscode sql.NullString
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDepartment,
		arg.Name,
		arg.Codename,
		arg.Accesscode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createParkingSession = `-- name: CreateParkingSession :execresult
INSERT INTO parkingsession(station_id, service_id, report, created_at, updated_at)
VALUES($1, $2, $3, $4, $5)
`

type CreateParkingSessionParams struct {
	StationID int32
	ServiceID int32
	Report    sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateParkingSession(ctx context.Context, arg CreateParkingSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createParkingSession,
		arg.StationID,
		arg.ServiceID,
		arg.Report,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createParkingStation = `-- name: CreateParkingStation :execresult
INSERT INTO parkingstation(name, codename, created_at, updated_at)
VALUES($1, $2, $3, $4)
`

type CreateParkingStationParams struct {
	Name      string
	Codename  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateParkingStation(ctx context.Context, arg CreateParkingStationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createParkingStation,
		arg.Name,
		arg.Codename,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createService = `-- name: CreateService :execresult
INSERT INTO service(name, date, time, created_at, updated_at)
VALUES($1, $2, $3, $4, $5)
`

type CreateServiceParams struct {
	Name      string
	Date      time.Time
	Time      sql.NullTime
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createService,
		arg.Name,
		arg.Date,
		arg.Time,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createTeamMember = `-- name: CreateTeamMember :execresult
INSERT INTO team_member(fullname, codename, phone_number, email, password, is_team_leader, is_admin, department_id, created_at, updated_at)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateTeamMemberParams struct {
	Fullname     string
	Codename     string
	PhoneNumber  string
	Email        sql.NullString
	Password     sql.NullString
	IsTeamLeader sql.NullBool
	IsAdmin      sql.NullBool
	DepartmentID int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateTeamMember(ctx context.Context, arg CreateTeamMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeamMember,
		arg.Fullname,
		arg.Codename,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
		arg.IsTeamLeader,
		arg.IsAdmin,
		arg.DepartmentID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteAllocation = `-- name: DeleteAllocation :execresult
DELETE FROM allocation WHERE id = $1
`

func (q *Queries) DeleteAllocation(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllocation, id)
}

const getDepartment = `-- name: GetDepartment :one
SELECT id, name, codename, created_at, updated_at, accesscode FROM department WHERE id = $1
`

func (q *Queries) GetDepartment(ctx context.Context, id int32) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartment, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Codename,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Accesscode,
	)
	return i, err
}

const getDepartmentByCode = `-- name: GetDepartmentByCode :one
SELECT id, name, codename, created_at, updated_at, accesscode FROM department WHERE codename = $1 OR accessCode = $1
`

func (q *Queries) GetDepartmentByCode(ctx context.Context, codename string) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByCode, codename)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Codename,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Accesscode,
	)
	return i, err
}

const getMemberAllocation = `-- name: GetMemberAllocation :one
SELECT allocation.id, team_member_id, parking_id, service_id, allocation.created_at, allocation.updated_at, parkingstation.id, name, codename, parkingstation.created_at, parkingstation.updated_at FROM allocation JOIN parkingstation ON parking_id = parkingstation.id  WHERE team_member_id = $1 AND service_id = $2
`

type GetMemberAllocationParams struct {
	TeamMemberID int32
	ServiceID    int32
}

type GetMemberAllocationRow struct {
	ID           int32
	TeamMemberID int32
	ParkingID    int32
	ServiceID    int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ID_2         int32
	Name         string
	Codename     string
	CreatedAt_2  time.Time
	UpdatedAt_2  time.Time
}

func (q *Queries) GetMemberAllocation(ctx context.Context, arg GetMemberAllocationParams) (GetMemberAllocationRow, error) {
	row := q.db.QueryRowContext(ctx, getMemberAllocation, arg.TeamMemberID, arg.ServiceID)
	var i GetMemberAllocationRow
	err := row.Scan(
		&i.ID,
		&i.TeamMemberID,
		&i.ParkingID,
		&i.ServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Name,
		&i.Codename,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getParkingSession = `-- name: GetParkingSession :one
SELECT id, station_id, service_id, report, created_at, updated_at FROM parkingsession WHERE id = $1
`

func (q *Queries) GetParkingSession(ctx context.Context, id int32) (Parkingsession, error) {
	row := q.db.QueryRowContext(ctx, getParkingSession, id)
	var i Parkingsession
	err := row.Scan(
		&i.ID,
		&i.StationID,
		&i.ServiceID,
		&i.Report,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getParkingStation = `-- name: GetParkingStation :one
SELECT id, name, codename, created_at, updated_at FROM parkingstation WHERE id = $1
`

func (q *Queries) GetParkingStation(ctx context.Context, id int32) (Parkingstation, error) {
	row := q.db.QueryRowContext(ctx, getParkingStation, id)
	var i Parkingstation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Codename,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getService = `-- name: GetService :one
SELECT id, name, date, created_at, updated_at, time FROM service WHERE id = $1
`

func (q *Queries) GetService(ctx context.Context, id int32) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Time,
	)
	return i, err
}

const getTeamMemberByCodeName = `-- name: GetTeamMemberByCodeName :one
SELECT id, fullname, codename, phone_number, email, is_team_leader, is_admin, department_id FROM team_member WHERE codename = $1
`

type GetTeamMemberByCodeNameRow struct {
	ID           int32
	Fullname     string
	Codename     string
	PhoneNumber  string
	Email        sql.NullString
	IsTeamLeader sql.NullBool
	IsAdmin      sql.NullBool
	DepartmentID int32
}

func (q *Queries) GetTeamMemberByCodeName(ctx context.Context, codename string) (GetTeamMemberByCodeNameRow, error) {
	row := q.db.QueryRowContext(ctx, getTeamMemberByCodeName, codename)
	var i GetTeamMemberByCodeNameRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Codename,
		&i.PhoneNumber,
		&i.Email,
		&i.IsTeamLeader,
		&i.IsAdmin,
		&i.DepartmentID,
	)
	return i, err
}

const getTeamMemberByID = `-- name: GetTeamMemberByID :one
SELECT team_member.id, fullname, team_member.codename, phone_number, email, is_team_leader, is_admin, department_id, department.codename, department.name
FROM team_member
JOIN department ON department_id = department.id
WHERE team_member.id = $1
`

type GetTeamMemberByIDRow struct {
	ID           int32
	Fullname     string
	Codename     string
	PhoneNumber  string
	Email        sql.NullString
	IsTeamLeader sql.NullBool
	IsAdmin      sql.NullBool
	DepartmentID int32
	Codename_2   string
	Name         string
}

func (q *Queries) GetTeamMemberByID(ctx context.Context, id int32) (GetTeamMemberByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTeamMemberByID, id)
	var i GetTeamMemberByIDRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Codename,
		&i.PhoneNumber,
		&i.Email,
		&i.IsTeamLeader,
		&i.IsAdmin,
		&i.DepartmentID,
		&i.Codename_2,
		&i.Name,
	)
	return i, err
}

const getTeamMemberHashedPwd = `-- name: GetTeamMemberHashedPwd :one
SELECT password FROM team_member WHERE codename = $1
`

func (q *Queries) GetTeamMemberHashedPwd(ctx context.Context, codename string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getTeamMemberHashedPwd, codename)
	var password sql.NullString
	err := row.Scan(&password)
	return password, err
}

const listAllocation = `-- name: ListAllocation :many
SELECT allocation.id, team_member_id, parking_id, service_id, allocation.created_at, allocation.updated_at, parkingstation.id, parkingstation.name, codename, parkingstation.created_at, parkingstation.updated_at, service.id, service.name, date, service.created_at, service.updated_at, time FROM allocation 
JOIN parkingstation ON parking_id = parkingstation.id 
JOIN service ON service_id = service_id.id
`

type ListAllocationRow struct {
	ID           int32
	TeamMemberID int32
	ParkingID    int32
	ServiceID    int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ID_2         int32
	Name         string
	Codename     string
	CreatedAt_2  time.Time
	UpdatedAt_2  time.Time
	ID_3         int32
	Name_2       string
	Date         time.Time
	CreatedAt_3  time.Time
	UpdatedAt_3  time.Time
	Time         sql.NullTime
}

func (q *Queries) ListAllocation(ctx context.Context) ([]ListAllocationRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllocation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllocationRow
	for rows.Next() {
		var i ListAllocationRow
		if err := rows.Scan(
			&i.ID,
			&i.TeamMemberID,
			&i.ParkingID,
			&i.ServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Codename,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.Name_2,
			&i.Date,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDepartment = `-- name: ListDepartment :many
SELECT id, name, codename, created_at, updated_at, accesscode FROM department ORDER BY ID DESC
`

func (q *Queries) ListDepartment(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, listDepartment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Codename,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Accesscode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParkingSession = `-- name: ListParkingSession :many
SELECT id, station_id, service_id, report, created_at, updated_at FROM parkingsession ORDER BY ID DESC
`

func (q *Queries) ListParkingSession(ctx context.Context) ([]Parkingsession, error) {
	rows, err := q.db.QueryContext(ctx, listParkingSession)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parkingsession
	for rows.Next() {
		var i Parkingsession
		if err := rows.Scan(
			&i.ID,
			&i.StationID,
			&i.ServiceID,
			&i.Report,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParkingStation = `-- name: ListParkingStation :many
SELECT id, name, codename, created_at, updated_at FROM parkingstation ORDER BY ID DESC
`

func (q *Queries) ListParkingStation(ctx context.Context) ([]Parkingstation, error) {
	rows, err := q.db.QueryContext(ctx, listParkingStation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parkingstation
	for rows.Next() {
		var i Parkingstation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Codename,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listService = `-- name: ListService :many
SELECT id, name, date, created_at, updated_at, time FROM service ORDER BY ID DESC
`

func (q *Queries) ListService(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listService)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceAllocation = `-- name: ListServiceAllocation :many
SELECT allocation.id, team_member_id, parking_id, service_id, allocation.created_at, allocation.updated_at, parkingstation.id, parkingstation.name, codename, parkingstation.created_at, parkingstation.updated_at, service.id, service.name, date, service.created_at, service.updated_at, time FROM allocation 
JOIN parkingstation ON parking_id = parkingstation.id 
JOIN service ON service_id = service_id.id 
WHERE service_id = $1
`

type ListServiceAllocationRow struct {
	ID           int32
	TeamMemberID int32
	ParkingID    int32
	ServiceID    int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ID_2         int32
	Name         string
	Codename     string
	CreatedAt_2  time.Time
	UpdatedAt_2  time.Time
	ID_3         int32
	Name_2       string
	Date         time.Time
	CreatedAt_3  time.Time
	UpdatedAt_3  time.Time
	Time         sql.NullTime
}

func (q *Queries) ListServiceAllocation(ctx context.Context, serviceID int32) ([]ListServiceAllocationRow, error) {
	rows, err := q.db.QueryContext(ctx, listServiceAllocation, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServiceAllocationRow
	for rows.Next() {
		var i ListServiceAllocationRow
		if err := rows.Scan(
			&i.ID,
			&i.TeamMemberID,
			&i.ParkingID,
			&i.ServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Codename,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.Name_2,
			&i.Date,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceParkingAllocation = `-- name: ListServiceParkingAllocation :many
SELECT allocation.id As allocationId, service.id As serviceId, service.name As serviceName, parkingstation.id As parkingId, parkingstation.codename As parkingCodeName, parkingstation.name as parkingName, team_member.id As teamMemberId, team_member.fullname As teamMemberName, team_member.codename As teamMemberCodeName  FROM allocation 
JOIN parkingstation ON parking_id = parkingstation.id 
JOIN service ON service_id = service.id 
JOIN team_member ON team_member_id = team_member.id 
WHERE service_id = $1 and parking_id = $2
`

type ListServiceParkingAllocationParams struct {
	ServiceID int32
	ParkingID int32
}

type ListServiceParkingAllocationRow struct {
	Allocationid       int32
	Serviceid          int32
	Servicename        string
	Parkingid          int32
	Parkingcodename    string
	Parkingname        string
	Teammemberid       int32
	Teammembername     string
	Teammembercodename string
}

func (q *Queries) ListServiceParkingAllocation(ctx context.Context, arg ListServiceParkingAllocationParams) ([]ListServiceParkingAllocationRow, error) {
	rows, err := q.db.QueryContext(ctx, listServiceParkingAllocation, arg.ServiceID, arg.ParkingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServiceParkingAllocationRow
	for rows.Next() {
		var i ListServiceParkingAllocationRow
		if err := rows.Scan(
			&i.Allocationid,
			&i.Serviceid,
			&i.Servicename,
			&i.Parkingid,
			&i.Parkingcodename,
			&i.Parkingname,
			&i.Teammemberid,
			&i.Teammembername,
			&i.Teammembercodename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceParkingStations = `-- name: ListServiceParkingStations :many
SELECT parkingsession.id, station_id, service_id, report, parkingsession.created_at, parkingsession.updated_at, parkingstation.id, name, codename, parkingstation.created_at, parkingstation.updated_at FROM parkingsession
JOIN parkingstation ON station_id = parkingstation.id
WHERE service_id = $1
`

type ListServiceParkingStationsRow struct {
	ID          int32
	StationID   int32
	ServiceID   int32
	Report      sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID_2        int32
	Name        string
	Codename    string
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) ListServiceParkingStations(ctx context.Context, serviceID int32) ([]ListServiceParkingStationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listServiceParkingStations, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServiceParkingStationsRow
	for rows.Next() {
		var i ListServiceParkingStationsRow
		if err := rows.Scan(
			&i.ID,
			&i.StationID,
			&i.ServiceID,
			&i.Report,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Codename,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamMember = `-- name: ListTeamMember :many
SELECT id, fullname, codename, phone_number, email, is_team_leader, is_admin, department_id FROM team_member ORDER BY ID DESC
`

type ListTeamMemberRow struct {
	ID           int32
	Fullname     string
	Codename     string
	PhoneNumber  string
	Email        sql.NullString
	IsTeamLeader sql.NullBool
	IsAdmin      sql.NullBool
	DepartmentID int32
}

func (q *Queries) ListTeamMember(ctx context.Context) ([]ListTeamMemberRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeamMember)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeamMemberRow
	for rows.Next() {
		var i ListTeamMemberRow
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Codename,
			&i.PhoneNumber,
			&i.Email,
			&i.IsTeamLeader,
			&i.IsAdmin,
			&i.DepartmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamMemberByDepartment = `-- name: ListTeamMemberByDepartment :many
SELECT id, fullname, codename, phone_number, email, is_team_leader, is_admin, department_id
FROM team_member WHERE department_id = $1 ORDER BY ID DESC
`

type ListTeamMemberByDepartmentRow struct {
	ID           int32
	Fullname     string
	Codename     string
	PhoneNumber  string
	Email        sql.NullString
	IsTeamLeader sql.NullBool
	IsAdmin      sql.NullBool
	DepartmentID int32
}

func (q *Queries) ListTeamMemberByDepartment(ctx context.Context, departmentID int32) ([]ListTeamMemberByDepartmentRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeamMemberByDepartment, departmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeamMemberByDepartmentRow
	for rows.Next() {
		var i ListTeamMemberByDepartmentRow
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Codename,
			&i.PhoneNumber,
			&i.Email,
			&i.IsTeamLeader,
			&i.IsAdmin,
			&i.DepartmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :exec
UPDATE service 
SET name = $2, date = $3
WHERE id = $1
`

type UpdateServiceParams struct {
	ID   int32
	Name string
	Date time.Time
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) error {
	_, err := q.db.ExecContext(ctx, updateService, arg.ID, arg.Name, arg.Date)
	return err
}
