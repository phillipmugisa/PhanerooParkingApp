// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: security.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const listAllocation = `-- name: ListAllocation :many
SELECT id, team_member_id, parking_id, service_id, created_at, updated_at FROM allocation ORDER BY ID DESC
`

func (q *Queries) ListAllocation(ctx context.Context) ([]Allocation, error) {
	rows, err := q.db.QueryContext(ctx, listAllocation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Allocation
	for rows.Next() {
		var i Allocation
		if err := rows.Scan(
			&i.ID,
			&i.TeamMemberID,
			&i.ParkingID,
			&i.ServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDepartment = `-- name: ListDepartment :many
SELECT id, name, codename, created_at, updated_at FROM department ORDER BY ID DESC
`

func (q *Queries) ListDepartment(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, listDepartment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Codename,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParkingSession = `-- name: ListParkingSession :many
SELECT id, station_id, service_id, report, created_at, updated_at FROM parkingsession ORDER BY ID DESC
`

func (q *Queries) ListParkingSession(ctx context.Context) ([]Parkingsession, error) {
	rows, err := q.db.QueryContext(ctx, listParkingSession)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parkingsession
	for rows.Next() {
		var i Parkingsession
		if err := rows.Scan(
			&i.ID,
			&i.StationID,
			&i.ServiceID,
			&i.Report,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParkingStation = `-- name: ListParkingStation :many
SELECT id, name, codename, created_at, updated_at FROM parkingstation ORDER BY ID DESC
`

func (q *Queries) ListParkingStation(ctx context.Context) ([]Parkingstation, error) {
	rows, err := q.db.QueryContext(ctx, listParkingStation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parkingstation
	for rows.Next() {
		var i Parkingstation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Codename,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listService = `-- name: ListService :many
SELECT id, name, date, created_at, updated_at FROM service ORDER BY ID DESC
`

func (q *Queries) ListService(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listService)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamMember = `-- name: ListTeamMember :many
SELECT id, fullname, codename, phone_number, email, is_team_leader, is_admin, department_id, created_at, updated_at FROM team_member ORDER BY ID DESC
`

func (q *Queries) ListTeamMember(ctx context.Context) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, listTeamMember)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Codename,
			&i.PhoneNumber,
			&i.Email,
			&i.IsTeamLeader,
			&i.IsAdmin,
			&i.DepartmentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAllocation = `-- name: createAllocation :execresult
INSERT INTO allocation(team_member_id, parking_id, service_id, created_at, updated_at)
VALUES(?, ?, ?, ?, ?)
`

type createAllocationParams struct {
	TeamMemberID sql.NullInt32
	ParkingID    sql.NullInt32
	ServiceID    sql.NullInt32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) createAllocation(ctx context.Context, arg createAllocationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAllocation,
		arg.TeamMemberID,
		arg.ParkingID,
		arg.ServiceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createDepartment = `-- name: createDepartment :execresult
INSERT INTO department(name, codename, created_at, updated_at)
VALUES(?, ?, ?, ?)
`

type createDepartmentParams struct {
	Name      sql.NullString
	Codename  sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) createDepartment(ctx context.Context, arg createDepartmentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDepartment,
		arg.Name,
		arg.Codename,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createParkingSession = `-- name: createParkingSession :execresult
INSERT INTO parkingsession(station_id, service_id, report, created_at, updated_at)
VALUES(?, ?, ?, ?, ?)
`

type createParkingSessionParams struct {
	StationID sql.NullInt32
	ServiceID sql.NullInt32
	Report    sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) createParkingSession(ctx context.Context, arg createParkingSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createParkingSession,
		arg.StationID,
		arg.ServiceID,
		arg.Report,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createParkingStation = `-- name: createParkingStation :execresult
INSERT INTO parkingstation(name, codename, created_at, updated_at)
VALUES(?, ?, ?, ?)
`

type createParkingStationParams struct {
	Name      sql.NullString
	Codename  sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) createParkingStation(ctx context.Context, arg createParkingStationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createParkingStation,
		arg.Name,
		arg.Codename,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createService = `-- name: createService :execresult
INSERT INTO service(name, date, created_at, updated_at)
VALUES(?, ?, ?, ?)
`

type createServiceParams struct {
	Name      sql.NullString
	Date      time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) createService(ctx context.Context, arg createServiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createService,
		arg.Name,
		arg.Date,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createTeamMember = `-- name: createTeamMember :execresult
INSERT INTO team_member(fullname, codename, phone_number, email, is_team_leader, is_admin, department_id, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type createTeamMemberParams struct {
	Fullname     sql.NullString
	Codename     sql.NullString
	PhoneNumber  sql.NullString
	Email        sql.NullString
	IsTeamLeader sql.NullBool
	IsAdmin      sql.NullBool
	DepartmentID sql.NullInt32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) createTeamMember(ctx context.Context, arg createTeamMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeamMember,
		arg.Fullname,
		arg.Codename,
		arg.PhoneNumber,
		arg.Email,
		arg.IsTeamLeader,
		arg.IsAdmin,
		arg.DepartmentID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}
