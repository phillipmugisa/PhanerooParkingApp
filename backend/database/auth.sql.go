// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const cancelToken = `-- name: CancelToken :exec
UPDATE jwt_token
SET is_valid = FALSE
WHERE team_member_id = $1
`

func (q *Queries) CancelToken(ctx context.Context, teamMemberID int32) error {
	_, err := q.db.ExecContext(ctx, cancelToken, teamMemberID)
	return err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO jwt_token (access_token, refresh_token, team_member_id, created_at, updated_at)
VALUES($1, $2, $3, $4, $5)
`

type CreateTokenParams struct {
	AccessToken  string
	RefreshToken sql.NullString
	TeamMemberID int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TeamMemberID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUserToken = `-- name: GetUserToken :one
SELECT id, access_token, team_member_id, is_valid, created_at, updated_at, refresh_token FROM jwt_token WHERE team_member_id = $1
`

func (q *Queries) GetUserToken(ctx context.Context, teamMemberID int32) (JwtToken, error) {
	row := q.db.QueryRowContext(ctx, getUserToken, teamMemberID)
	var i JwtToken
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.TeamMemberID,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefreshToken,
	)
	return i, err
}

const getUserTokenByRefreshToken = `-- name: GetUserTokenByRefreshToken :one
SELECT id, access_token, team_member_id, is_valid, created_at, updated_at, refresh_token FROM jwt_token WHERE refresh_token = $1
`

func (q *Queries) GetUserTokenByRefreshToken(ctx context.Context, refreshToken sql.NullString) (JwtToken, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenByRefreshToken, refreshToken)
	var i JwtToken
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.TeamMemberID,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefreshToken,
	)
	return i, err
}
